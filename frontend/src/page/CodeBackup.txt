{/* Additional Info */}
      <div className="">
        {/* <h3 className="mb-4 bg-purple-200 text-purple-700 px-3 py-2 rounded-md text-md font-semibold">
            Additional Information
          </h3> */}



        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">

          {/* <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Project Coordinator
              </label>
              <Select
                options={pcOptions.map((u) => ({
                  value: u._id,
                  label: u.name,
                }))}
                value={pcId}
                onChange={setPcId}
                placeholder="Select PC"
              />
            </div> */}

          {/* <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Team Lead<span className="text-red-500">*</span>
              </label>
              <Select
                options={tlOptions.map((u) => ({ value: u._id, label: u.name }))}
                value={tlId}
                onChange={(selectedOption) => {
                  setTlId(selectedOption); // âœ… selected option object
                  setErrors((prev) => ({ ...prev, tlId: "" }));
                }}
                placeholder="Select Team Lead"
              />
              {errors.tlId && <p className="text-red-500 text-sm mt-1">{errors.tlId}</p>}
            </div> */}

          {/* Devs */}
          {/* <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Developers
              </label>
              <Select
                isMulti
                options={devOptions.map((u) => ({
                  value: u._id,
                  label: u.name,
                }))}
                value={devId}
                onChange={setDevId}
                placeholder="Select Developers..."
              />
            </div> */}

          {/* QA */}
          {/* <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                QA Lead
              </label>
              <Select
                options={qaOptions.map((u) => ({
                  value: u._id,
                  label: u.name,
                }))}
                value={qaId}
                onChange={setQaId}
                placeholder="Select QA"
              />
            </div> */}

          {/* Execution Person */}
          {/* <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Execution Person
              </label>
              <Select
                // options={tlOptions.map((u) => ({
                //   value: u._id,
                //   label: u.name,
                // }))}
                // value={tlId}
                // onChange={setTlId}
                placeholder="Select Execution Person if any"
              />
            </div> */}

          {/* BAU */}
          {/* <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                BAU Person
              </label>
              <select
                value={bauPerson}
                onChange={(e) => setBauPerson(e.target.value)}
                className="w-full bg-gray-100 rounded p-2"
              >
                <option value="">Select Person</option>
                <option value="Aakanksha Dixit">Aakanksha Dixit</option>
              </select>
            </div> */}
        </div>
      </div>


      
        {/* Table */}
        {user?.roleName === "Sales Head" && (
          <div className="overflow-x-auto max-h-[500px] overflow-y-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-100 text-gray-700 sticky top-0">
                <tr>
                  {columns.map((col) => (
                    <th
                      key={col}
                      className="px-3 py-2 text-left font-semibold whitespace-nowrap"
                    >
                      {col}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {loading ? (
                  <tr>
                    <td
                      colSpan={columns.length}
                      className="text-center p-4 text-gray-500"
                    >
                      <div className="flex justify-center items-center">
                        <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent text-blue-600"></div>
                      </div>
                    </td>
                  </tr>
                ) : data.length > 0 ? (
                  data
                    .slice((currentPage - 1) * pageSize, currentPage * pageSize)
                    .map((project, idx) => (
                      <tr
                        key={project._id}
                        className={idx % 2 === 0 ? "bg-white" : "bg-gray-50"}
                      >
                        {/* Serial number */}
                        <td className="px-3 py-2">
                          {(currentPage - 1) * pageSize + idx + 1}
                        </td>

                        {/* ProjectCode + ProjectName */}
                        <td className="px-3 py-2 whitespace-nowrap text-blue-700 cursor-pointer"
                        onClick={() => navigate(`/project/${project._id}/details`)}
                        >
                          {project.ProjectCode ?? "-"}{" "}
                          {project.ProjectName ?? "-"}
                        </td>

                        <td className="px-3 py-2 whitespace-nowrap">
                          {project.IndustryType ?? "-"}
                        </td>

                        {/* FeedName if exists */}
                        {/* <td className="px-3 py-2">{project.Feeds?.[0]?.FeedName ?? "-"}</td> */}

                        {/* FeedId */}
                        {/* <td className="px-3 py-2">{project.Feeds?.[0]?.FeedId ?? "-"}</td> */}

                        {/* Domain | Application | Country */}
                        {/* <td className="px-3 py-2">
          {project.Feeds?.[0]?.DomainName && project.Feeds?.[0]?.ApplicationType && project.Feeds?.[0]?.CountryName
            ? `${project.Feeds[0].DomainName} | ${project.Feeds[0].ApplicationType} | ${project.Feeds[0].CountryName}`
            : "-"}
        </td> */}

                        <td className="px-3 py-2 whitespace-nowrap">
                          {project.PMId?.name ?? "-"}
                        </td>
                        <td className="px-3 py-2">
                          {project.BDEId?.name ?? "-"}
                        </td>
                        <td className="px-3 py-2">
                          {project.DeliveryType ?? "-"}
                        </td>
                        <td className="px-3 py-2">
                          {project.Frequency ?? "-"}
                        </td>
                        <td className="px-3 py-2 whitespace-nowrap">{project.Status ?? "-"}</td>
                        <td className="px-3 py-2">
                          <button
                            onClick={() =>
                              navigate(`/project/${project._id}/attachments`)
                            }
                            className="text-blue-600 hover:underline"
                          >
                            View Files
                          </button>
                        </td>

                        <td className="px-3 py-2">
                          {project.ProjectType ?? "-"}
                        </td>

                        <td className="px-3 py-2 whitespace-nowrap">
                          {project.CreatedBy?.name ?? "-"}
                        </td>
                        <td className="px-3 py-2">
                          {new Date(project.CreatedDate).toLocaleDateString() ??
                            "-"}
                        </td>

                        <td className="px-3 py-2">
                          <button
                            onClick={() => {
                              setSelectedProject(project);
                              setIsUpdateModalOpen(true);
                            }}
                          >
                            <FaEdit
                              size={20}
                              className="text-blue-600 hover:text-blue-800"
                            />
                          </button>
                        </td>
                      </tr>
                    ))
                ) : (
                  <tr>
                    <td colSpan={14} className="text-center p-8 text-gray-500">
                      <div className="flex flex-col items-center justify-center gap-3">
                        <img
                          src={Img}
                          alt="No data"
                          className="w-32 h-32 object-contain opacity-80"
                        />
                        <p className="font-semibold text-lg text-gray-600">
                          No Data Found
                        </p>
                        <p className="text-sm text-gray-400">
                          Try adding new projects to see them here.
                        </p>
                      </div>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>

            {/* Modal: render only once */}
            <UpdateProjectModal
              isOpen={isUpdateModalOpen}
              onClose={() => setIsUpdateModalOpen(false)}
              project={selectedProject}
              onUpdate={handleUpdateProject}
            />
          </div>
        )}

        {user?.roleName == "Sales Manager" && (
          <div className="overflow-x-auto max-h-[500px] overflow-y-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-100 text-gray-700 sticky top-0">
                <tr>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    No
                  </th>
                  {/* <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">Project Code</th> */}
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Project Name
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Feed Name
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Feed ID
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Platform
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Project Type
                  </th>
                  {/* <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">SOW File</th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">Sample Files</th> */}
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Attachments
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Frequency
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Project Status
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Project Manager
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    BDE
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Created By
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Created Date
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Action
                  </th>
                </tr>
              </thead>
              <tbody>
                {loading ? (
                  <tr>
                    <td
                      colSpan={columns.length}
                      className="text-center p-4 text-gray-500"
                    >
                      <div className="flex justify-center items-center">
                        <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent text-blue-600"></div>
                      </div>
                    </td>
                  </tr>
                ) : (
                  (() => {
                    // âœ… Step 1: Flatten data into feed-based rows
                    const flattenedRows = data.flatMap((project) =>
                      (project.Feeds && project.Feeds.length > 0
                        ? project.Feeds
                        : [null]
                      ) // placeholder for projects with no feeds
                        .map((feed) => ({
                          project,
                          feed,
                        }))
                    );

                    // âœ… Step 2: Slice based on pagination
                    const startIdx = (currentPage - 1) * pageSize;
                    const paginatedRows = flattenedRows.slice(
                      startIdx,
                      startIdx + pageSize
                    );

                    // âœ… Step 3: Render paginated feed-rows
                    return paginatedRows.length > 0 ? (
                      paginatedRows.map((item, idx) => (
                        <tr
                          key={item.feed?._id || `${item.project._id}-${idx}`}
                          className={
                            (startIdx + idx) % 2 === 0
                              ? "bg-white"
                              : "bg-gray-50"
                          }
                        >
                          {/* âœ… Continuous serial number */}
                          <td className="px-3 py-2">{startIdx + idx + 1}</td>

                          {/* âœ… Combine ProjectCode + ProjectName */}
                          <td className="px-3 py-2">
                            {item.project.ProjectCode
                              ? `${item.project.ProjectCode}`
                              : "-"}{" "}
                            {item.project.ProjectName ?? "-"}
                          </td>

                          {/* âœ… Example feed-specific column */}
                          <td className="px-3 py-2">
                            {item.feed?.FeedName ?? "-"}

                            {/* {`${item.project.ProjectType ?? "-"} | ${item.feed?.DomainName ?? "-"} | ${item.feed.ApplicationType ?? "-"} | ${item.feed?.CountryName ?? "-"} | ${item.project.ProjectName ?? "-"}`} */}
                          </td>

                          <td className="px-3 py-2">
                            {item.feed?.FeedId ?? "-"}
                          </td>

                          <td className="px-3 py-2">
                            {item.feed?.DomainName &&
                            item.feed?.ApplicationType &&
                            item.feed?.CountryName
                              ? `${item.feed?.DomainName} | ${item.feed?.ApplicationType} | ${item.feed?.CountryName}`
                              : "-"}
                          </td>

                          <td className="px-3 py-2">
                            {item.project.ProjectType ?? "-"}
                          </td>

                          <td className="px-3 py-2">
                            <button
                              onClick={() =>
                                navigate(`/project/${item.project._id}/files`)
                              }
                              className="text-blue-600 hover:underline"
                            >
                              View Files
                            </button>
                          </td>

                          <td className="px-3 py-2">
                            {item.project.Frequency ?? "-"}
                          </td>
                          <td className="px-3 py-2">
                            {item.project.Status ?? "-"}
                          </td>
                          <td className="px-3 py-2">
                            {item.project.PMId?.name ?? "-"}
                          </td>
                          <td className="px-3 py-2">
                            {item.project.BDEId?.name ?? "-"}
                          </td>
                          <td className="px-3 py-2">
                            {item.project.CreatedBy?.name ?? "-"}
                          </td>
                          <td className="px-3 py-2">
                            {new Date(
                              item.project.CreatedDate
                            ).toLocaleDateString() ?? "-"}
                          </td>

                          <td className="px-3 py-2">
                            <button
                              onClick={() => {
                                setSelectedProject(item.project);
                                setIsUpdateModalOpen(true);
                              }}
                            >
                              <FaEdit
                                size={20}
                                className="text-blue-600 hover:text-blue-800"
                              />
                            </button>
                          </td>
                        </tr>
                      ))
                    ) : (
                      <tr>
                        <td
                          colSpan={12}
                          className="text-center p-8 text-gray-500"
                        >
                          <div className="flex flex-col items-center justify-center gap-3">
                            <img
                              src={Img}
                              alt="No data"
                              className="w-32 h-32 object-contain opacity-80"
                            />
                            <p className="font-semibold text-lg text-gray-600">
                              No Data Found
                            </p>
                            <p className="text-sm text-gray-400">
                              Try adding new projects to see them here.
                            </p>
                          </div>
                        </td>
                      </tr>
                    );
                  })()
                )}
              </tbody>
            </table>

            {/* Modal: render only once */}
            <UpdateProjectModal
              isOpen={isUpdateModalOpen}
              onClose={() => setIsUpdateModalOpen(false)}
              project={selectedProject}
              onUpdate={handleUpdateProject}
            />
          </div>
        )}

        {user?.roleName === "Business Development Executive" && (
          <div className="overflow-x-auto max-h-[500px] overflow-y-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-100 text-gray-700 sticky top-0">
                <tr>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    No
                  </th>
                  {/* <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">Project Code</th> */}
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Project Name
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Feed Name
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Feed ID
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Platform
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Project Type
                  </th>
                  {/* <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">SOW File</th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">Sample Files</th> */}
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Attachments
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Frequency
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Project Status
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Project Manager
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    BDE
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Created By
                  </th>
                  <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">
                    Created Date
                  </th>
                  {/* <th className="px-3 py-2 text-left font-semibold whitespace-nowrap">Action</th> */}
                </tr>
              </thead>
              <tbody>
                {loading ? (
                  <tr>
                    <td
                      colSpan={columns.length}
                      className="text-center p-4 text-gray-500"
                    >
                      <div className="flex justify-center items-center">
                        <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent text-blue-600"></div>
                      </div>
                    </td>
                  </tr>
                ) : (
                  (() => {
                    // âœ… Step 1: Flatten data into feed-based rows
                    const flattenedRows = data.flatMap((project) =>
                      (project.Feeds && project.Feeds.length > 0
                        ? project.Feeds
                        : [null]
                      ) // placeholder for projects with no feeds
                        .map((feed) => ({
                          project,
                          feed,
                        }))
                    );

                    // âœ… Step 2: Slice based on pagination
                    const startIdx = (currentPage - 1) * pageSize;
                    const paginatedRows = flattenedRows.slice(
                      startIdx,
                      startIdx + pageSize
                    );

                    // âœ… Step 3: Render paginated feed-rows
                    return paginatedRows.length > 0 ? (
                      paginatedRows.map((item, idx) => (
                        <tr
                          key={item.feed?._id || `${item.project._id}-${idx}`}
                          className={
                            (startIdx + idx) % 2 === 0
                              ? "bg-white"
                              : "bg-gray-50"
                          }
                        >
                          {/* âœ… Continuous serial number */}
                          <td className="px-3 py-2">{startIdx + idx + 1}</td>

                          {/* âœ… Combine ProjectCode + ProjectName */}
                          <td className="px-3 py-2">
                            {item.project.ProjectCode
                              ? `${item.project.ProjectCode}`
                              : "-"}{" "}
                            {item.project.ProjectName ?? "-"}
                          </td>

                          {/* âœ… Example feed-specific column */}
                          <td className="px-3 py-2">
                            {/* {item.feed.FeedName ?? "-"} */}

                            {`${item.project.ProjectType ?? "-"} | ${
                              item.feed?.DomainName ?? "-"
                            } | ${item.feed.ApplicationType ?? "-"} | ${
                              item.feed?.CountryName ?? "-"
                            } | ${item.project.ProjectName ?? "-"}`}
                          </td>

                          <td className="px-3 py-2">
                            {item.feed?.FeedId ?? "-"}
                          </td>

                          <td className="px-3 py-2">
                            {item.feed?.DomainName &&
                            item.feed?.ApplicationType &&
                            item.feed?.CountryName
                              ? `${item.feed?.DomainName} | ${item.feed?.ApplicationType} | ${item.feed?.CountryName}`
                              : "-"}
                          </td>

                          <td className="px-3 py-2">
                            {item.project.ProjectType ?? "-"}
                          </td>

                          <td className="px-3 py-2">
                            <button
                              onClick={() =>
                                navigate(`/project/${item.project._id}/files`)
                              }
                              className="text-blue-600 hover:underline"
                            >
                              View Files
                            </button>
                          </td>

                          <td className="px-3 py-2">
                            {item.project.Frequency ?? "-"}
                          </td>
                          <td className="px-3 py-2">
                            {item.project.Status ?? "-"}
                          </td>
                          <td className="px-3 py-2">
                            {item.project.PMId?.name ?? "-"}
                          </td>
                          <td className="px-3 py-2">
                            {item.project.BDEId?.name ?? "-"}
                          </td>
                          <td className="px-3 py-2">
                            {item.project.CreatedBy?.name ?? "-"}
                          </td>
                          <td className="px-3 py-2">
                            {new Date(
                              item.project.CreatedDate
                            ).toLocaleDateString() ?? "-"}
                          </td>
                        </tr>
                      ))
                    ) : (
                      <tr>
                        <td
                          colSpan={12}
                          className="text-center p-8 text-gray-500"
                        >
                          <div className="flex flex-col items-center justify-center gap-3">
                            <img
                              src={Img}
                              alt="No data"
                              className="w-32 h-32 object-contain opacity-80"
                            />
                            <p className="font-semibold text-lg text-gray-600">
                              No Data Found
                            </p>
                            <p className="text-sm text-gray-400">
                              Try adding new projects to see them here.
                            </p>
                          </div>
                        </td>
                      </tr>
                    );
                  })()
                )}
              </tbody>
            </table>
          </div>
        )}